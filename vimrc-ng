
" VimPlug: https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'
Plug 'yegappan/mru'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mbbill/undotree'
Plug 'preservim/nerdcommenter'
" Initialize plugin system
call plug#end()

let mapleader = ','
filetype plugin indent on
syntax enable
set laststatus=2
set autoread
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set cindent
set showmatch
set number
set hlsearch
set incsearch
set ignorecase smartcase
set fileencoding=utf8
set encoding=utf8
set wildmenu
set mouse=a
set fileformats=unix,dos
set ffs=unix,dos,mac
set guicursor+=a:blinkon0
set novisualbell noerrorbells
set belloff=all
set nobackup
set nowritebackup
set nowb
set noswapfile
set nobomb
set backspace=indent,eol,start
if !has('nvim')
    if !isdirectory($HOME . '/.local/vim/undo')
        call mkdir($HOME . '/.local/vim/undo', 'p', 0700)
    endif
    set undodir=~/.local/vim/undo
endif
set undofile
set complete+=k,kspell complete-=w complete-=b complete-=u complete-=t
set completeopt-=preview
set spelllang=en,es
set hidden
set history=200
set scrolloff=15
set noshowmode
set pastetoggle=<f5>

autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif

augroup resume_edit_position
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ | execute "normal! g`\"zvzz"
        \ | endif
augroup END

function! InsertConsoleLog()
  let word = expand("<cword>")
  let linenumber = line(".")
  execute "normal A \<BS>\<CR>\<ESC>0Aconsole.log('[" . expand('%:t'). ":" .linenumber. "]', ".word."); \/* TODO *\/"
endfunction
map <silent> ,v :call InsertConsoleLog()<CR>bbbbi

if has("gui_running")
  nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
else
  map <silent> <leader><cr> :noh<cr>
endif

noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>
nnoremap <silent> <leader>w :update<CR>
nnoremap <silent> <leader>q :x<CR>
inoremap <S-Tab> <ESC><<i
nnoremap <up> :echoerr "Don't use arrow keys, use H, J, K, L instead!"<CR>
nnoremap <down> :echoerr "Don't use arrow keys, use H, J, K, L instead!"<CR>
nnoremap <right> :echoerr "Don't use arrow keys, use H, J, K, L instead!"<CR>
nnoremap <left> :echoerr "Don't use arrow keys, use H, J, K, L instead!"<CR>

colorscheme onedark
set background=dark
set guifont=Hack\ Nerd\ Font:h12
if has("gui_running")
  set cursorline
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guioptions+=a
  set guioptions-=m
else
  set t_Co=256
endif

" NerdTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-m> :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" BufExplorer
if has("gui_win32")
  map <M-*> :b#<CR> " switch to latest buffer
  nnoremap <silent> <M-+> :BufExplorer<CR>
else
  map <D-*> :b#<CR> " seitch to latest buffer
  nnoremap <silent> <D-+> :BufExplorer<CR>
endif

" FZF
let g:fzf_layout = { 'down': '40%' }
nnoremap <silent> <C-p> :GFiles<CR>
nnoremap <silent> <C-g> :Rg<CR>

" ALE
let g:ale_completion_enabled = 1
let g:ale_completion_autoimport = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint', 'prettier'],
\   'typescript': ['prettier'],
\   'typescriptreact': ['prettier'],
\   'scss': ['prettier'],
\   'css': ['prettier']
\}
let g:ale_fix_on_save = 1
nmap <silent> gd :ALEGoToDefinition<CR>
nmap <silent> gy :ALEGoToTypeDefinition -vsplit<CR>
nmap ]w :ALENextWrap<CR>
nmap [w :ALEPreviousWrap<CR>
augroup VimDiff
  autocmd!
  autocmd VimEnter,BufEnter,FilterWritePre * if &diff | ALEDisable | endif
augroup END

" MRU
let MRU_Max_Entries = 20
map <leader>f :MRU<CR>

" Ligthline
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'LightlineGitbranch'
  \ },
  \ }

function! LightlineGitbranch() abort
    if exists('*fugitive#head')
        let branch = fugitive#head()
        return branch !=# '' ? 'î‚  '. branch : ''
    endif
    return fugitive#head()
endfunction

" Undotree
nnoremap <leader>- :UndotreeToggle<CR>

" Fugitive
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gP :Git push<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gl :GV!<CR>
nnoremap <leader>gL :GV<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gm :Git checkout master<CR>
