" Find more examples here: https://jb.gg/share-ideavimrc
let mapleader=" "

""" Plugins  --------------------------------
set commentary
" Trying the new syntax
Plug 'machakann/vim-highlightedyank'

""" Common settings -------------------------
set showmode
set so=5
set nu

" search
set incsearch
set hlsearch
set ignorecase
set smartcase
set infercase
set wildignorecase
set showmatch
" ident
set breakindent
set autoindent
set smartindent
" tab
set expandtab
set smarttab

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray

""" My Mappings -----------------------------
map <leader>e <Action>(FileStructurePopup)
map <leader>o <Action>(SelectInProjectView)
map <leader>h <Action>(Vcs.ShowTabbedFileHistory)

" (Open file)
map <leader>n <Action>(OpenFile)

" Reformat the current line only
map <leader>l V<Action>(ReformatCode)

" Pick action/class/symbol/file/recent change file/recent file
map <leader>a <Action>(GotoAction)
map <leader>c <Action>(GotoClass)
map <leader>s <Action>(GotoSymbol)
map <leader>ff <Action>(GotoFile)
map <leader>fc <Action>(RecentChangedFiles)
map <leader>fo <Action>(RecentFiles)

" Goto
map gu <Action>(GotoSuperMethod)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclaration)
map gt <Action>(GotoTest)
map gj <Action>(GotoNextError)
map gk <Action>(GotoPreviousError)
"
map gh <Action>(QuickJavaDoc)
map gH <Action>(QuickActions)
map gr <Action>(RefactoringMenu)
map ga <Action>(ShowIntentionActions)
map gf <Action>(ShowUsages)
map gF <Action>(FindUsages)

" Just makes me nervous
map H h

" I think it's a better solution
map U <C-R>

" Previous buffer
map <leader><tab> :b#<CR>

" Close the current buffer
map <leader>xx :bd<cr>

" Close all the buffers
map <leader>xa :bufdo bd<cr>

" Next/previous buffer
map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Map Ctrl-<Space> to / (search)
map <leader>s /

" Cancel highlight search
nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>

" Custom mappings for insert log
function! InsertConsoleLog()
  let word = expand("<cword>")
  let linenumber = line(".")
  execute "normal A \<BS>\<CR>\<ESC>0Aconsole.log('[" . expand('%:t'). ":" .linenumber. "]', ".word."); \/* TODO *\/"
endfunction
map <silent> <leader>v :call InsertConsoleLog()<CR>
